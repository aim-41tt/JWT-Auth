version: '3.8'

services:
  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - app-network

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    hostname: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    networks:
      - app-network

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - 8090:8080
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    networks:
      - app-network
    depends_on:
     - kafka


  # Redis
  redis:
     image: redis:7.0-alpine         
     container_name: redis
     command: redis-server /usr/local/etc/redis/redis.conf  
       
     ports:
        - "6379:6379"                
     configs:
        - source: redis_config      
          target: /usr/local/etc/redis/redis.conf
     restart: unless-stopped
     networks:
        - app-network


  # Email Verifier
  email-verifier:
    image: aim41tt/email-verifier:latest
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_LISTENER_CONCURRENCY: 2
      CONSUMER_GRUP_ID: EmailVerifer
      CONSUMER_TOPIC_NAME: verifer
      GMAIL_USERNAME:  ${GMAIL_USERNAME}
      GMAIL_PASSWORD_APP: ${GMAIL_PASSWORD_APP}
    ports:
      - "8081:8080"
    depends_on:
      - kafka
    networks:
      - app-network


  # Main Database
  main-db:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: auth
    ports:
      - "5480:5432"
    networks:
      - app-network


  # JWT Auth Service
  jwt-auth:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: JWT-Auth
    environment:
      DATABASE_JDBC_URL: jdbc:postgresql://main-db:5432/auth?user=${POSTGRES_USER}&password=${POSTGRES_PASSWORD}
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      REDIS_HOST: redis://custom_user:custom_password@redis:6379
      REDIS_PORT: 6379
      CONSUMER_GROUP_ID: JWT-AUTH
      KAFKA_LISTENER_CONCURRENCY: 2
      KEYSTORE_PATH: ${KEYSTORE_PATH}
      KEYSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      KEYSTORE_TYPE: ${KEYSTORE_TYPE}
      KEYSTORE: "baeldung"
    depends_on:
      - kafka
      - redis
    ports:
      - "8080:8080"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

configs:  
  redis_config:
   file: ./redis.conf            # файл конфигурации Redis

